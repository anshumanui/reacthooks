{"version":3,"sources":["components/common.js","components/UseStatePage.js","components/UseEffectPage.js","components/UseContextPage.js","components/UseMemoPage.js","components/UseCallbackPage.js","components/UseReducerPage.js","components/UseRefPage.js","App.js","serviceWorker.js","index.js"],"names":["removeHashTag","event","preventDefault","UseStatePage","ToDoList","useState","tasks","setTasks","taskName","setTaskName","className","onSubmit","title","name","type","value","onChange","target","map","item","index","key","MessageBox","message","setMessage","messageText","LoginForm","username","setUsername","password","setPassword","LoginFormDynamic","form","setForm","updateForm","data-uk-grid","UseEffectPage","UseContextPage","UseMemoPage","MemoizedCalculation","count","setCount","wordIndex","setWordIndex","words","word","letterCount","useMemo","i","length","computeLetterCount","style","padding","onClick","UseCallbackPage","UseReducerPage","UseRefPage","App","data-uk-tab","href","id","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.7c8dc2da.chunk.js","sourcesContent":["\nexport const removeHashTag = (event) => {\n\tevent.preventDefault();\n}","import React, { useState } from 'react';\n\n\nfunction UseStatePage() {\n\tconst ToDoList = () => {\n        /*\n            Starts the code for to do list,\n            on enter it shows the list\n        */\n\n        const [tasks, setTasks] = useState([]);\n        const [taskName, setTaskName] = useState('');\n\n        const addTask = (event) => {\n            event.preventDefault();\n\n            setTasks([\n                ...tasks, {title: taskName}\n            ]);\n\n            setTaskName('');\n        };\n\n        return (\n            <div className=\"uk-padding uk-background-secondary uk-light\">\n                <form className=\"uk-form-stacked\" onSubmit={ addTask }>\n                    <label className=\"uk-form-label uk-text-uppercase\">Add Tasks</label>\n                    <div className=\"uk-form-controls\">\n                        <input\n                            name=\"tasktitle\"\n                            type=\"text\"\n                            className=\"uk-input\"\n                            value={ taskName }\n                            onChange={ (event) => setTaskName(event.target.value) }\n                        />\n                    </div>\n                </form>\n\n                <ul className=\"uk-list uk-list-decimal uk-list-divider uk-margin-remove-bottom\">\n                    {\n                        tasks.map((item, index) => (\n                            <li key={ 'li_' + index}>{ item.title }</li>\n                        ))\n                    }\n                </ul>\n            </div>\n        );\n    }\n\n\n    const MessageBox = () => {\n        /*\n            Starts the code for message,\n            but saves in an object,\n            only displays the current entered \n            message and it will fail to update\n        */\n\n        const [message, setMessage] = useState({ title: '' });\n\n        const enterMessage = (messageText) => {\n            message.title = messageText;\n\n            setMessage(message);\n        }\n\n        const addTask = (event) => {\n            event.preventDefault();\n        }\n\n        return (\n            <div className=\"uk-padding uk-background-secondary uk-light\">\n                <form className=\"uk-form-stacked\" onSubmit={ addTask }>\n                    <label className=\"uk-form-label uk-text-uppercase\">Enter Message</label>\n                    <div className=\"uk-form-controls\">\n                        <input\n                            name=\"messagetitle\"\n                            type=\"text\"\n                            className=\"uk-input\"\n                            value={ message.title }\n                            onChange={ (event) => enterMessage(event.target.value) }\n                        />\n                    </div>\n                </form>\n\n                <p className=\"uk-margin-remove-bottom\">{ message.title }</p>\n            </div>\n        );\n    }\n\n\n    const LoginForm = () => {\n\t\tconst [username, setUsername] = useState('');\n\t\tconst [password, setPassword] = useState('');\n\n\t\treturn (\n\t\t\t<form className=\"uk-form-stacked uk-padding uk-background-secondary uk-light\">\n\t\t\t\t<label className=\"uk-form-label uk-text-uppercase\">Username</label>\n\t\t\t\t<div className=\"uk-form-controls\">\n\t\t\t\t    <input\n\t\t\t\t    \ttype=\"text\" \n\t\t\t\t      \tname=\"username\"\n\t\t\t\t      \tclassName=\"uk-input uk-form-width-large\"\n\t\t\t\t      \tvalue={ username }\n\t\t\t\t      \tonChange={ (event) => setUsername(event.target.value) }\n\t\t\t\t    />\n\t\t\t\t</div>\n\n\t\t\t\t<label className=\"uk-form-label uk-text-uppercase uk-margin-small-top\">Password</label>\n\t\t\t\t<div className=\"uk-form-controls\">\n\t\t\t\t    <input\n\t\t\t\t    \ttype=\"password\" \n\t\t\t\t      \tname=\"password\"\n\t\t\t\t      \tclassName=\"uk-input uk-form-width-large\"\n\t\t\t\t      \tvalue={ password }\n\t\t\t\t      \tonChange={ (event) => setPassword(event.target.value) }\n\t\t\t\t    />\n\t\t\t\t</div>\n\n\t\t\t  \t<p className=\"uk-margin-remove-bottom\">Username: { username ? username : 'Nothing entered yet!' } | Password: { password ? password : 'Nothing entered yet!' }</p>\n\t\t\t</form>\n\t\t);\n\n    }\n\n\n    const LoginFormDynamic = () => {\n\t\tconst [form, setForm] = useState({\n\t\t    username: '',\n\t\t    password: ''\n\t  \t});\n\n\t\tconst updateForm = (event) => {\n\t\t\tevent.preventDefault();\n\n\t\t\tsetForm({\n\t\t      \t...form,\n\t\t      \t[event.target.name]: event.target.value\n\t\t    });\n\t\t};\n\n\t\treturn (\n\t\t\t<form className=\"uk-form-stacked uk-padding uk-background-secondary uk-light\">\n\t\t\t\t<label className=\"uk-form-label uk-text-uppercase\">Username</label>\n\t\t\t\t<div className=\"uk-form-controls\">\n\t\t\t\t    <input\n\t\t\t\t    \ttype=\"text\" \n\t\t\t\t      \tname=\"usernameDynamic\"\n\t\t\t\t      \tclassName=\"uk-input uk-form-width-large\"\n\t\t\t\t      \tvalue={ form.username }\n\t\t\t\t      \tonChange={ updateForm }\n\t\t\t\t    />\n\t\t\t\t</div>\n\n\t\t\t\t<label className=\"uk-form-label uk-text-uppercase uk-margin-small-top\">Password</label>\n\t\t\t\t<div className=\"uk-form-controls\">\n\t\t\t\t    <input\n\t\t\t\t    \ttype=\"password\" \n\t\t\t\t      \tname=\"passwordDynamic\"\n\t\t\t\t      \tclassName=\"uk-input uk-form-width-large\"\n\t\t\t\t      \tvalue={ form.password }\n\t\t\t\t      \tonChange={ updateForm }\n\t\t\t\t    />\n\t\t\t\t</div>\n\n\t\t\t  \t<p className=\"uk-margin-remove-bottom\">Username: { form.username ? form.username : 'Nothing entered yet!' } | Password: { form.password ? form.password : 'Nothing entered yet!' }</p>\n\t\t\t</form>\n\t\t);\n\n    }\n\n\n    return (\n\t\t<li>\n            <div className=\"uk-grid-medium uk-child-width-1-2@s uk-margin-medium-top\" data-uk-grid>\n                <div>\n                    <pre className=\"info\">\n                    {`const [state, setState] = useState(initialState);`}\n                    </pre>\n                </div>\n            </div>\n\n            <ul className=\"uk-list uk-list-decimal uk-margin-small-top uk-margin-medium-bottom\">\n                <li>During the initial render, the returned state <code>(state)</code> is the same as the value passed as the first argument <code>(initialState)</code>.</li>\n                <li>The <code>setState</code> function is used to update the state. It accepts a new state value and enqueues a re-render of the component.</li>\n            </ul>\n\n            <div className=\"uk-grid-medium uk-margin-large-top uk-margin-large-bottom uk-child-width-expand@s\" data-uk-grid>\n                <div>\n                    <h5 className=\"uk-margin-remove success uk-box-shadow-small uk-padding-small uk-light\">Example - Increasing a counter</h5>\n                    <pre className=\"uk-margin-remove-top uk-padding-small\">\n{`function Counter() {\n    //  0 is the initial value or count\n    const [count, setCount] = useState(0);   \n\n    const increaseCounter = () => {\n        //  setCount increments the value \n        //  of count on every click\n        setCount(count + 1);       \n    }\n\n    return (\n        <div>\n            <span>Count: { count }</span>\n            <button onClick={ increaseCounter }>\n                Increase Counter\n            </button>\n        </div>\n    );\n}`}\n                    </pre>\n                </div>\n\n                <div>\n                    <h5 className=\"uk-margin-remove success uk-box-shadow-small uk-padding-small uk-light\">Example - Same (Shortcut)</h5>\n                    <pre className=\"uk-margin-remove-top uk-padding-small\">\n{`function Counter() {\n    //  0 is the initial value or count\n    const [count, setCount] = useState(0);\n\n    //  The same piece of code can be \n    //  rewritten like this\n\n    return (\n        <div>\n            <span>Count: { count }</span>\n            <button \n                onClick={ () => setCount(count + 1) }>\n                Increase Counter\n            </button>\n        </div>\n    );\n}`}\n                    </pre>\n                </div>\n\n                <div className=\"uk-width-1-4@s\">\n                    <h5 className=\"uk-margin-remove info uk-box-shadow-small uk-padding-small uk-light\">Key Points to Remember</h5>\n                    <div className=\"uk-background-muted uk-padding-small\">\n                        <ul className=\"uk-list uk-list-decimal\">\n                            <li><code>useState</code> returns array because compared to an object, an array is more flexible and easy to use.</li>\n                            <li>If you update a State Hook to the same value as the current state, React will bail out without rendering the children or firing effects.</li>\n                            <li>React uses <code>Object.is</code> for comparing.</li>\n                            <li>React may still need to render that specific component again before bailing out.</li>\n                        </ul>\n                    </div>\n                </div>\n            </div>\n\n            <hr />\n\n            <div className=\"uk-grid-medium uk-margin-large-top uk-margin-medium-bottom uk-child-width-expand@s\" data-uk-grid>\n            \t<div>\n                    <h5 className=\"uk-margin-remove success uk-box-shadow-small uk-padding-small uk-light\">Example - Increasing counter with setTimeout</h5>\n                    <pre className=\"uk-margin-remove-top uk-padding-small\">\n{`function Counter() {\n    const [count, setCount] = useState(0);   \n\n    const increaseCounter = () => {\n        //  Increment the value with a delay of 1s\n        setTimeout(() => setCount(count + 1), 1000);       \n    }\n\n    return (\n        <div>\n            <span>Count: { count }</span>\n            <button onClick={ increaseCounter }>\n                Increase Counter\n            </button>\n        </div>\n    );\n}`}\n                    </pre>\n                </div>\n\n                <div>\n                    <h5 className=\"uk-margin-remove success uk-box-shadow-small uk-padding-small uk-light\">Example - Increasing counter with setTimeout</h5>\n                    <pre className=\"uk-margin-remove-top uk-padding-small\">\n{`function Counter() {\n    const [count, setCount] = useState(0);   \n\n    const increaseCounter = () => {\n        //  Increment the value with a delay of 1s\n        setTimeout(() => setCount(value => value + 1), 1000);       \n    }\n\n    return (\n        <div>\n            <span>Count: { count }</span>\n            <button onClick={ increaseCounter }>\n                Increase Counter\n            </button>\n        </div>\n    );\n}`}\n                    </pre>\n                </div>\n\n                <div className=\"uk-width-1-4@s\">\n                    <h5 className=\"uk-margin-remove info uk-box-shadow-small uk-padding-small uk-light\">Key Points to Remember</h5>\n                    <div className=\"uk-background-muted uk-padding-small\">\n                        <ul className=\"uk-list uk-list-decimal\">\n                            <li>The (value in the e.g.) update function will always operate on the same state (count in the e.g.) within this one second.</li>\n                            <li>The function offers you the state at the time of executing the function.</li>\n                            <li>If your state update depends on your previous state, you must pass a function that receives the previous state and returns an updated state, as given below from the previous example: <br />\n                \t\t\t\t<code>setCount(previousState => <br /> previousState + currentState)</code>\n                \t\t\t</li>\n                        </ul>\n                    </div>\n                </div>\n            </div>\n\n            <hr />\n\n            <div className=\"uk-grid-large uk-margin-medium-top uk-child-width-1-2@s\" data-uk-grid>\n                <div>\n                    <h5 className=\"uk-margin-remove-top uk-margin-medium-bottom cc-title\">Demo - Create Task List</h5>\n                    <ToDoList />\n\n                    <h5 className=\"uk-margin-remove-bottom uk-margin-medium-top success uk-box-shadow-small uk-padding-small uk-light\">Example - Create Task List</h5>\n                    <pre className=\"uk-margin-remove-top uk-padding-small\">\n{`const ToDoList = () => {\n    const [tasks, setTasks] = useState([]);\n    const [taskName, setTaskName] = useState('');\n\n    const addTask = (event) => {\n        event.preventDefault();\n\n        setTasks([\n            ...tasks, {title: taskName}\n        ]);\n\n        setTaskName('');\n    };\n\n    return (\n        <div className=\"uk-padding uk-background-secondary uk-light\">\n            <form className=\"uk-form-stacked\" onSubmit={ addTask }>\n                <label className=\"uk-form-label uk-text-uppercase\">Add Tasks</label>\n                <div className=\"uk-form-controls\">\n                    <input\n                        name=\"tasktitle\"\n                        type=\"text\"\n                        className=\"uk-input\"\n                        value={ taskName }\n                        onChange={ (event) => setTaskName(event.target.value) }\n                    />\n                </div>\n            </form>\n\n            <ul className=\"uk-list uk-list-decimal uk-list-divider uk-margin-remove-bottom\">\n                {\n                    tasks.map((item, index) => (\n                        <li key={ 'li_' + index}>{ item.title }</li>\n                    ))\n                }\n            </ul>\n        </div>\n    );\n}`}\n                    </pre>\n                </div>\n\n                <div>\n                    <h5 className=\"uk-margin-remove-top uk-margin-medium-bottom cc-title\">Demo - Enter Message (Wrong Usage)</h5>\n                    <MessageBox />\n\n                    <h5 className=\"uk-margin-remove-bottom uk-margin-medium-top error uk-box-shadow-small uk-padding-small uk-light\">Example - Enter Message (Wrong Usage)</h5>\n                    <pre className=\"uk-margin-remove-top uk-padding-small\">\n{`const MessageBox = () => {\n    const [message, setMessage] = useState({ title: '' });\n\n    const enterMessage = (messageText) => {\n        message.title = messageText;\n\n        setMessage(message);\n    }\n\n    const addTask = (event) => {\n        event.preventDefault();\n    }\n\n    return (\n        <div className=\"uk-padding uk-background-secondary uk-light\">\n            <form className=\"uk-form-stacked\" onSubmit={ addTask }>\n                <label className=\"uk-form-label uk-text-uppercase\">Enter Message</label>\n                <div className=\"uk-form-controls\">\n                    <input\n                        name=\"messagetitle\"\n                        type=\"text\"\n                        className=\"uk-input\"\n                        value={ message.title }\n                        onChange={ (event) => enterMessage(event.target.value) }\n                    />\n                </div>\n            </form>\n\n            <p className=\"uk-margin-remove-bottom\">{ message.title }</p>\n        </div>\n    );\n}`}\n                    </pre>\n\n                    <p>To make it work, we have to do the following changes</p>\n\n                    <pre>\n{`const enterMessage = (messageText) => {\n    const message = { title: messageText };\n    setMessage(message); // Now it works\n}`}\n                    </pre>\n\n                    <p>When we update a state variable, unlike <code>this.setState</code> in a component class, the function returned by <code>useState</code> does not automatically merge update objects, it replaces them.</p>\n                </div>\n\n                <div>\n                    <h5 className=\"uk-margin-remove-bottom error uk-margin-small-top success uk-box-shadow-small uk-padding-small uk-light\">Example - Enter Message (With object properties)</h5>\n                    <pre className=\"uk-margin-remove-top uk-padding-small\">\n{`const MessageBox = () => {\n    const [message, setMessage] = useState({ title: '', entryNo: 15 });\n\n    const enterMessage = (messageText) => {\n        const message = { title: messageText };\n        setMessage(message);    //  'entryNo' property is lost\n    }\n    .....\n}`}\n                    </pre>\n                </div>\n\n                <div>\n                    <h5 className=\"uk-margin-remove-bottom uk-margin-small-top success uk-box-shadow-small uk-padding-small uk-light\">Example - Enter Message (Retaining object properties using prevState)</h5>\n                    <pre className=\"uk-margin-remove-top uk-padding-small success\">\n{`const enterMessage = (messageText) => {\n\tsetMessage(prevState => {\n\t\treturn { ...prevState, message: messageText }\n\t});\n}`}\n                    </pre>\n\n                    <p><code>...prevState</code> part will get all of the properties of the object and the <code>message: messageText</code> part will overwrite the message property.</p>\n                </div>\n\n                <div className=\"uk-width-1-1@s\">\n                \tThere’s nothing wrong with calling useState multiple times, and in most cases, that’s how I store multiple values. Once you get over 4 or 5 useState calls it gets a bit unwieldy, but if you’re fine with it, React is too.\n                </div>\n\n                <div className=\"uk-width-expand@s\"> \n                    <h5 className=\"uk-margin-remove-top uk-margin-medium-bottom cc-title\">Demo - Login Form (Repetitive state variables)</h5>   \n                    <LoginForm />         \t\n                \t<h5 className=\"uk-margin-remove-bottom success uk-box-shadow-small uk-padding-small uk-light\">Example - Login form (Repetitive state variables)</h5>\n                    <div className=\"uk-background-muted uk-padding-small\">\n                \t\t<pre>\n{`function LoginForm() {\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  \n  const printValues = e => {\n    e.preventDefault();\n    console.log(form.username, form.password);\n  };\n\n  return (\n    <form onSubmit={printValues}>\n      <label>\n        Username:\n        <input\n          value={username}\n          onChange={event => setUsername(event.target.value)}\n          type=\"text\" name=\"username\"\n        />\n      </label>\n      <br />\n      <label>\n        Password:\n        <input\n          value={password}\n          onChange={event => setPassword(event.target.value)}\n          type=\"password\" name=\"password\"\n        />\n      </label>\n      <br />\n      <button>Submit</button>\n    </form>\n  );\n}`}\n                \t\t</pre>\n                \t</div>\n                </div>\n\n                <div className=\"uk-width-3-5@s\"> \n                    <h5 className=\"uk-margin-remove-top uk-margin-medium-bottom cc-title\">Demo - Login Form (Dynamic setting state)</h5>   \n                    <LoginFormDynamic />             \t\n                    <h5 className=\"uk-margin-remove-bottom success uk-box-shadow-small uk-padding-small uk-light\">Example - Login form (Dynamic setting state)</h5>\n                    <pre className=\"uk-margin-remove-top uk-padding-small success\">\n{`function LoginForm() {\n  const [form, setState] = useState({\n    username: '',\n    password: ''\n  });\n\n  const printValues = e => {\n    e.preventDefault();\n    console.log(form.username, form.password);\n  };\n\n  const updateField = e => {\n    setState({\n      ...form,\n      [e.target.name]: e.target.value\n    });\n  };\n\n  return (\n    <form onSubmit={printValues}>\n      <label>\n        Username:\n        <input value={form.username} name=\"username\" onChange={updateField} />\n      </label>\n      <br />\n      <label>\n        Password:\n        <input value={form.password} name=\"password\" type=\"password\" onChange={updateField}\n        />\n      </label>\n      <br />\n      <button>Submit</button>\n    </form>\n  );\n}`}\n                    </pre>\n                </div>\n            </div>\n        </li>\n    );\n}\n\nexport default UseStatePage;","import React, { useState } from 'react';\n\n\nfunction UseEffectPage() {\n\n    return (\n\t\t<li>\n            <div className=\"uk-grid-medium uk-child-width-1-2@s uk-margin-medium-top\" data-uk-grid>\n                <div>\n                    <pre className=\"info\">\n                    {`const [state, setState] = useState(initialState);`}\n                    </pre>\n                </div>\n            </div>\n\n            <ul className=\"uk-list uk-list-decimal uk-margin-small-top uk-margin-medium-bottom\">\n                <li>During the initial render, the returned state <code>(state)</code> is the same as the value passed as the first argument <code>(initialState)</code>.</li>\n                <li>The <code>setState</code> function is used to update the state. It accepts a new state value and enqueues a re-render of the component.</li>\n            </ul>\n        </li>\n    );\n}\n\nexport default UseEffectPage;","import React, { useState } from 'react';\n\n\nfunction UseContextPage() {\n\n    return (\n\t\t<li>\n            <div className=\"uk-grid-medium uk-child-width-1-2@s uk-margin-medium-top\" data-uk-grid>\n                <div>\n                    <pre className=\"info\">\n                    {`const value = useContext(MyContext);`}\n                    </pre>\n                </div>\n            </div>\n\n            <ul className=\"uk-list uk-list-decimal uk-margin-small-top uk-margin-medium-bottom\">\n                <li>During the initial render, the returned state <code>(state)</code> is the same as the value passed as the first argument <code>(initialState)</code>.</li>\n                <li>The <code>setState</code> function is used to update the state. It accepts a new state value and enqueues a re-render of the component.</li>\n            </ul>\n        </li>\n    );\n}\n\nexport default UseContextPage;","import React, { useState, useMemo } from 'react';\n\n\nfunction UseMemoPage() {\n    const MemoizedCalculation = () => {\n        // State for our counter\n        const [count, setCount] = useState(0);\n        // State to keep track of current word in array we want to show\n        const [wordIndex, setWordIndex] = useState(0);\n\n        // Words we can flip through and view letter count\n        const words = ['hey', 'this', 'is', 'cool'];\n        const word = words[wordIndex];\n\n        // Returns number of letters in a word\n        // We make it slow by including a large and completely unnecessary loop\n        const computeLetterCount = word => {\n            let i = 0;\n            while (i < 1000000000) {\n                i++;\n                return word.length;\n            }\n        };\n\n        // Memoize computeLetterCount so it uses cached return value if input array ...\n        // ... values are the same as last time the function was run.\n        const letterCount = useMemo(() => computeLetterCount(word), [word]);\n\n        // This would result in lag when incrementing the counter because ...\n        // ... we'd have to wait for expensive function when re-rendering.\n        //const letterCount = computeLetterCount(word);\n\n        return (\n            <div style={{ padding: '15px' }}>\n                <h2>Compute number of letters (slow 🐌)</h2>\n                <p>\"{word}\" has {letterCount} letters</p>\n                <button onClick={() => {\n                    const next = wordIndex + 1 === words.length ? 0 : wordIndex + 1;\n                    setWordIndex(next);\n                }}>\n                    Next word\n                </button>\n\n                <h2>Increment a counter (fast ⚡️)</h2>\n                <p>Counter: {count}</p>\n                <button onClick={() => setCount(count + 1)}>Increment</button>\n            </div>\n        );\n    }\n\n    return (\n\t\t<li>\n            <div className=\"uk-grid-medium uk-child-width-1-2@s uk-margin-medium-top\" data-uk-grid>\n                <div>\n                    <pre className=\"info\">\n                    {`const memoizedValue = useMemo(() => computeExpensiveValue(a, b), [a, b]);`}\n                    </pre>\n                </div>\n            </div>\n\n            <ul className=\"uk-list uk-list-decimal uk-margin-small-top uk-margin-medium-bottom\">\n                <li>Returns a <code>memoized</code> value.</li>\n                <li>In computing, <code>memoization</code> or <code>memoisation</code> is an optimization technique used primarily to speed up computer programs by storing the results of expensive function calls and returning the cached result when the same inputs occur again. </li>\n                <li>Pass a “create” function and an array of dependencies. <code>useMemo</code> will only recompute the memoized value when one of the dependencies has changed. This optimization helps to avoid expensive calculations on every render.</li>\n                <li>Remember that the function passed to useMemo runs during rendering. Don’t do anything there that you wouldn’t normally do while rendering. For example, side effects belong in <code>useEffect</code>, not <code>useMemo</code>.</li>\n                <li>The second argument is an array of dependencies [a, b], when one of the dependencies changes, <code>useMemo()</code> recomputes the value, if it doesn't - returns last memoized value.</li>\n                <li>If you forget to pass an array of dependencies, the new value computes every time the component renders.</li>\n            </ul>\n\n            <MemoizedCalculation />\n        </li>\n    );\n}\n\nexport default UseMemoPage;","import React, { useState } from 'react';\n\n\nfunction UseCallbackPage() {\n\n    return (\n\t\t<li>\n            <div className=\"uk-grid-medium uk-child-width-1-2@s uk-margin-medium-top\" data-uk-grid>\n                <div>\n                    <pre className=\"info\">\n                    {`const [state, setState] = useState(initialState);`}\n                    </pre>\n                </div>\n            </div>\n\n            <ul className=\"uk-list uk-list-decimal uk-margin-small-top uk-margin-medium-bottom\">\n                <li>During the initial render, the returned state <code>(state)</code> is the same as the value passed as the first argument <code>(initialState)</code>.</li>\n                <li>The <code>setState</code> function is used to update the state. It accepts a new state value and enqueues a re-render of the component.</li>\n            </ul>\n        </li>\n    );\n}\n\nexport default UseCallbackPage;","import React, { useState } from 'react';\n\n\nfunction UseReducerPage() {\n\n    return (\n\t\t<li>\n            <div className=\"uk-grid-medium uk-child-width-1-2@s uk-margin-medium-top\" data-uk-grid>\n                <div>\n                    <pre className=\"info\">\n                    {`const [state, setState] = useState(initialState);`}\n                    </pre>\n                </div>\n            </div>\n\n            <ul className=\"uk-list uk-list-decimal uk-margin-small-top uk-margin-medium-bottom\">\n                <li>During the initial render, the returned state <code>(state)</code> is the same as the value passed as the first argument <code>(initialState)</code>.</li>\n                <li>The <code>setState</code> function is used to update the state. It accepts a new state value and enqueues a re-render of the component.</li>\n            </ul>\n        </li>\n    );\n}\n\nexport default UseReducerPage;","import React, { useState } from 'react';\n\n\nfunction UseRefPage() {\n\n    return (\n\t\t<li>\n            <div className=\"uk-grid-medium uk-child-width-1-2@s uk-margin-medium-top\" data-uk-grid>\n                <div>\n                    <pre className=\"info\">\n                    {`const [state, setState] = useState(initialState);`}\n                    </pre>\n                </div>\n            </div>\n\n            <ul className=\"uk-list uk-list-decimal uk-margin-small-top uk-margin-medium-bottom\">\n                <li>During the initial render, the returned state <code>(state)</code> is the same as the value passed as the first argument <code>(initialState)</code>.</li>\n                <li>The <code>setState</code> function is used to update the state. It accepts a new state value and enqueues a re-render of the component.</li>\n            </ul>\n        </li>\n    );\n}\n\nexport default UseRefPage;","import React from 'react';\n//  import UIkit from 'uikit';\nimport Icons from 'uikit/dist/js/uikit-icons';\n\nimport '../node_modules/uikit/dist/css/uikit.min.css';\nimport '../node_modules/uikit/dist/js/uikit.min.js';\n\n//  Import SCSS for this component\nimport './assets/scss/app.scss';\n\nimport { removeHashTag } from './components/common';\n\nimport UseStatePage from './components/UseStatePage';\nimport UseEffectPage from './components/UseEffectPage';\nimport UseContextPage from './components/UseContextPage';\nimport UseMemoPage from './components/UseMemoPage';\nimport UseCallbackPage from './components/UseCallbackPage';\nimport UseReducerPage from './components/UseReducerPage';\nimport UseRefPage from './components/UseRefPage';\n\n//  UIkit.use(Icons);\n\n\nfunction App() {\n    return (\n        <main>\n            <div className=\"uk-container uk-container-expand uk-padding-remove\">\n                <section className=\"uk-background-secondary uk-padding uk-light\">\n                    <h2 className=\"uk-padding-remove uk-margin-remove\">React Hooks</h2>\n                </section>\n\n                <section className=\"uk-padding\">\n                    <ul className=\"uk-flex-center cc-tab\" data-uk-tab=\"connect: #component-tab-center; animation: uk-animation-fade\">\n                        <li className=\"uk-active\">\n                            <a href=\"/\" onClick={ removeHashTag }>useState</a>\n                        </li>\n                        <li>\n                            <a href=\"/\" onClick={ removeHashTag }>useEffect</a>\n                        </li>\n                        <li>\n                            <a href=\"/\" onClick={ removeHashTag }>useContext</a>\n                        </li>\n                        <li>\n                            <a href=\"/\" onClick={ removeHashTag }>useMemo</a>\n                        </li>\n                        <li>\n                            <a href=\"/\" onClick={ removeHashTag }>useCallback</a>\n                        </li>\n                        <li>\n                            <a href=\"/\" onClick={ removeHashTag }>useReducer</a>\n                        </li>\n                        <li>\n                            <a href=\"/\" onClick={ removeHashTag }>useRef</a>\n                        </li>\n                    </ul>\n\n                    <ul id=\"component-tab-center\" className=\"uk-switcher\">\n                        <UseStatePage />\n                        <UseEffectPage />\n                        <UseContextPage />\n                        <UseMemoPage />\n                        <UseCallbackPage />\n                        <UseReducerPage />\n                        <UseRefPage />\n                    </ul>\n                </section>\n            </div>\n        </main>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}